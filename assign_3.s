;THIS PROGRAM IMPLEMENTS NEURAL NETWORK.
;IT MAKES USE OF SIGMOID FUNCTION.
;SIGMOID IS STORED IN S8
;FINAL VALUE IS STORED IN R1

		AREA    exponent,CODE,READONLY
        EXPORT __main
		IMPORT	printMsg
		IMPORT	printMsg1
		IMPORT  printMsg2
		IMPORT  printLOGICFUNC
					
        ENTRY
__main    FUNCTION
			MOV R4, #0				;REGISTER THAT STORES WHAT LOGIC IS TO BE IMPLEMENTED
			MOV R7, #-1
			B NN

;THIS FUNCTION DETERMINES WHAT LOGIC IS TO BE IMPLEMENTED
NN		BL printLOGICFUNC
		CMP R4, #0
		BEQ LOGIC_AND
		CMP R4, #1
		BEQ LOGIC_OR
		CMP R4, #2
		BEQ LOGIC_NOT
		CMP R4, #3
		BEQ LOGIC_NAND
		CMP R4, #4
		BEQ LOGIC_NOR
		CMP R4, #5
		BEQ LOGIC_XOR
		CMP R4, #6
		BEQ LOGIC_XNOR
		BL DATASET
		BL COMPUTE
    
		IMPORT	printAND
		IMPORT	printNAND
		IMPORT  printOR
		IMPORT	printNOR
		IMPORT	printNOT
		IMPORT	printXOR
		IMPORT  printXNOR
	
	
    ;LOGIC GATES INITIALIZATION WITH DIFFERENT WEIGHTS
LOGIC_AND	BL printAND
			VLDR.F32 S14, =-0.1			;S1=W1
			VLDR.F32 S15, =0.2			;S2=W2
			VLDR.F32 S16, =0.2			;S3=W3
			VLDR.F32 S17, =-0.2			;S4=BIAS
			B DATASET

LOGIC_OR	BL printOR
			VLDR.F32 S14, =-0.1
			VLDR.F32 S15, =0.7
			VLDR.F32 S16, =0.7
			VLDR.F32 S17, =-0.1
			B DATASET
			
LOGIC_NOT	BL printNOT
			VLDR.F32 S14, =0.5
			VLDR.F32 S15, =-0.7
			VLDR.F32 S16, =0
			VLDR.F32 S17, =0.1
			B DATASET
			
LOGIC_NAND	BL printNAND
			VLDR.F32 S14, =0.6
			VLDR.F32 S15, =-0.8
			VLDR.F32 S16, =-0.8
			VLDR.F32 S17, =0.3
			B DATASET
			
LOGIC_NOR	BL printNOR
			VLDR.F32 S14, =0.5
			VLDR.F32 S15, =-0.7
			VLDR.F32 S16, =-0.7
			VLDR.F32 S17, =0.1
			B DATASET
			
LOGIC_XOR	BL printXOR
			VLDR.F32 S14, =-5
			VLDR.F32 S15, =20
			VLDR.F32 S16, =10
			VLDR.F32 S17, =1
			B DATASET
			
LOGIC_XNOR	BL printXNOR
			VLDR.F32 S14, =-5
			VLDR.F32 S15, =20
			VLDR.F32 S16, =10
			VLDR.F32 S17, =1
			B DATASET

;THIS PROVIDES THE DATASETS FOR THE LOGIC GATE
DATASET		VLDR.F32 S5, =1			;D1
			VLDR.F32 S6, =0			;D2
			VLDR.F32 S7, =0			;D3
			B COMPUTE
			
DATASET2	VLDR.F32 S5, =1			;D1
			VLDR.F32 S6, =0			;D2
			VLDR.F32 S7, =1			;D3
			B COMPUTE
			
DATASET3	VLDR.F32 S5, =1			;D1
			VLDR.F32 S6, =1			;D2
			VLDR.F32 S7, =0			;D3
			B COMPUTE
			
DATASET4	VLDR.F32 S5, =1			;D1
			VLDR.F32 S6, =1			;D2
			VLDR.F32 S7, =1			;D3
			B COMPUTE

;THIS CALCULATES THE VALUE OF AND TRANSFER THIS VALUE TO EXPONETIAL FUNCTION.
COMPUTE		VLDR.F32 S8, =0
			VMUL.F32 S11, S14, S5		
			VMUL.F32 S12, S15, S6
			VMUL.F32 S13, S16, S7
			VADD.F32 S8, S11, S12
			VADD.F32 S8, S8, S13
			VADD.F32 S8, S8, S17		;BIAS IS ADDED
			VMOV.F32 S0, S8			;VALUE OF X IS STORED IN S0
			VNEG.F32 S0, S0			;S0 IS NEGATED TO OBTAIN (-X)
			B CALC_SIG


CALC_SIG	VMOV.F32 S2, #1		;STORING FACTORIAL VALUE
			VMOV.F32 S5, #1		;STORING EACH TERM
			VMOV.F32 S6, #1		;STORING THE SUM
			MOV R1, #30			;NUMBER OF TERMS IN SERIES TO BE CALCULATED(n)
			MOV R10, #0
		

;THIS LOOP IS USED TO GENERATE DIFFERENT TERMS IN THE EXPONENTIAL SERIES.
LOOP1	BL POWER			;TO GENERATE DIFFERENT POWERS OF X.
		ADD R10, R10, #1	;INCREMENTING FOR LOOP
		MOV R3, R10			;LET R3 IS STORING n'
		VMOV.F32 S2, #1		;INITIALING THE FACTORIAL REGISTER
		CMP R10, R1			;COMPARISON FOR THE NO. OF TERMS(n'<n).
		BLT FACT			;BRANCHING TO FACT
		B SIGMOID


;THIS FUNCTION IS TO CALCULATE THE FACTORIAL OF A NUMBER.
;THE NUMBER WHOSE FACTORIAL IS TO BE CALCULATED WILL BE STORED IN R3.
;THE FACTORIAL VALUE WILL BE STORED IN S2.
FACT 	VMOV S3, R3			;MOVING THE VALUE OF R3 TO FPREGISTER S3.
		VCVT.F32.U32 S3, S3	;CONVERTING THE FLOATING POINT VALUE TO INTEGER.
		VMUL.F32 S2, S2, S3	;CALCULATING FACTORIAL BY MULTIPLYING S3.
		SUB R3, R3, #1		;DECREMENTING n'
		CMP R3, #1			;S7 IS USED TO STORE VALUE OF 1
		BGT FACT
		BLE SUM


;THIS FUNCTION CALCULATES THE SUM OF THE SERIES.
SUM		VDIV.F32 S7, S5, S2	;THIS CALCULATES EACH TERM BY DIVING THE POWER OF X BY FACTORIAL VALUE.
		VADD.F32 S6, S6, S7	;THE NEW TERM IS ADDED TO SUM.
		B LOOP1


;THIS IS USED TO CALCULATE DIFFERENT POWERS OF X
POWER	VMUL.F32 S5, S5, S0	;INCREASING POWER EACH TIME.
		BLX LR
	
;THIS LOOP CALCULATES THE SIGMOID.
SIGMOID		VMOV.F32 S8, #1
			VADD.F32 S9, S8, S6
			VDIV.F32 S8, S8, S9
			;VMOV.F32 R0, S8
			;VCVT.F32.U32 R0, R0
			B RESULT 


;THIS IS TO PRINT TRUTH TABLE OF A LOGIC GATE
RESULT	VLDR.F32 S10, =0.5			
		VCMP.F32 S8, S10
		VMRS APSR_NZCV, FPSCR
		MOVGT R3, #1
		MOVLT R3, #0
		ADD R7, R7, #1
		CMP R7, #0
		BEQ TRUTH_TABLE
		CMP R7, #1
		BEQ TRUTH_TABLE1
		CMP R7, #2
		BEQ TRUTH_TABLE2
		CMP R7, #3
		BEQ TRUTH_TABLE3
		;B PRINT_LOGIC


TRUTH_TABLE	BL printMsg2			;FIRST ROW OF TRUTH TABLE
			MOV R0, #1
			MOV R1, #0
			MOV R2, #0
			BL printMsg1
			BL DATASET2
			
TRUTH_TABLE1	MOV R0, #1			;SECOND ROW OF TRUTH TABLE
				MOV R1, #0
				MOV R2, #1
				BL printMsg1
				BL DATASET3

TRUTH_TABLE2	MOV R0, #1			;THIRD ROW OF TRUTH TABLE
				MOV R1, #1
				MOV R2, #0
				BL printMsg1
				BL DATASET4

TRUTH_TABLE3	MOV R0, #1			;FOURTH ROW OF TRUTH TABLE
				MOV R1, #1
				MOV R2, #1
				BL printMsg1
				B PRINT_LOGIC

			
PRINT_LOGIC		MOV R7, #-1		;THIS IS TO PRINT ALL LOGIC TRUTH TABLES
				ADD R4, R4, #1
				CMP R4, #6
				BGT STOP
				BLE NN

STOP    B STOP
        ENDFUNC
        END
